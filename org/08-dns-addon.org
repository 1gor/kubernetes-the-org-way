# -*- mode: org; mode: auto-fill -*-
#+TITLE:	Deploying the Cluster DNS Add-on
#+property:	header-args :mkdirp true

**** Licenses

#+BEGIN_SRC yaml :tangle files/services/kubedns.yaml
# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
#+END_SRC

#+BEGIN_SRC yaml :tangle files/deployments/kubedns.yaml
# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
#+END_SRC

**** Deployment

***** Services

Create a Kubernetes =Service= under the =/kube-system= namespace by
denifing within the =metadata= in the payload sent to the API server.

#+BEGIN_SRC yaml :tangle files/services/kubedns.yaml
# This file should be kept in sync with cluster/images/hyperkube/dns-svc.yaml
# 
# TODO - At some point, we need to rename all skydns-*.yaml.* files to kubedns-*.yaml.*
# 
# Warning: This is a file generated from the base underscore template file: skydns-svc.yaml.base
# 
apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "KubeDNS"
spec:
  selector:
    k8s-app: kube-dns
  clusterIP: 10.32.0.10 # This one is coupled to the --cluster-dns flag from the kubelet
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
#+END_SRC

***** Deployment

#+BEGIN_SRC yaml :tangle files/deployments/kubedns.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-dns-v19
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    version: v19
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: kube-dns
      version: v19
  template:
    metadata:
      labels:
        k8s-app: kube-dns
        version: v19
        kubernetes.io/cluster-service: "true"
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      containers:
      - name: kubedns
        image: gcr.io/google_containers/kubedns-amd64:1.7
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            cpu: 100m
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8081
            scheme: HTTP
          # we poll on pod startup for the Kubernetes master service and
          # only setup the /readiness HTTP server once that's available.
          initialDelaySeconds: 30
          timeoutSeconds: 5
        args:
        # command = "/kube-dns"
        - --domain=cluster.local
        - --dns-port=10053
        ports:
        - containerPort: 10053
          name: dns-local
          protocol: UDP
        - containerPort: 10053
          name: dns-tcp-local
          protocol: TCP
      - name: dnsmasq
        image: gcr.io/google_containers/kube-dnsmasq-amd64:1.3
        args:
        - --cache-size=1000
        - --no-resolv
        - --server=127.0.0.1#10053
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
      - name: healthz
        image: gcr.io/google_containers/exechealthz-amd64:1.1
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 10m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 50Mi
        args:
        - -cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 >/dev/null && nslookup kubernetes.default.svc.cluster.local 127.0.0.1:10053 >/dev/null
        - -port=8080
        - -quiet
        ports:
        - containerPort: 8080
          protocol: TCP
      dnsPolicy: Default  # Don't use cluster DNS.

#+END_SRC

**** Create

Create the =kubedns= service and deployment.

#+BEGIN_SRC sh :results output code :exports both
kubectl create -f files/services/kubedns.yaml --output json
#+END_SRC

#+RESULTS:
#+BEGIN_SRC sh
service "kube-dns" created
#+END_SRC

#+BEGIN_SRC sh :results output code :exports both
kubectl create -f files/deployments/kubedns.yaml 
#+END_SRC

#+RESULTS:
#+BEGIN_SRC sh
deployment "kube-dns-v19" created
#+END_SRC

**** Confirm

#+BEGIN_SRC sh :results output code :exports both
echo "--- 'kube-system' namespace"
kubectl --namespace=kube-system get svc,pods,rc,nodes -o wide
echo
echo "--- 'default' namespace"
kubectl --namespace=default get svc,pods,rc,nodes -o wide
echo
#+END_SRC

#+RESULTS:
#+BEGIN_SRC sh
--- 'kube-system' namespace
NAME                           CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE       SELECTOR
kube-dns                       10.32.0.10   <none>        53/UDP,53/TCP   2h        k8s-app=kube-dns
NAME                           READY        STATUS        RESTARTS        AGE       IP           NODE
kube-dns-v19-965658604-11x0e   3/3          Running       0               1h        10.200.0.2   worker0
kube-dns-v19-965658604-qewo9   3/3          Running       0               1h        10.200.2.2   worker2
NAME                           STATUS       AGE
worker0                        Ready        9d
worker1                        Ready        3d
worker2                        Ready        3d

--- 'default' namespace
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE       SELECTOR
kubernetes   10.32.0.1    <none>        443/TCP   9d        <none>
NAME         STATUS       AGE
worker0      Ready        9d
worker1      Ready        3d
worker2      Ready        3d

#+END_SRC

The output tells us that there are two replicas from the =kube-dns=
=Pod=, and one of them is running in the =worker0= with the ip =10.200.0.2=
and the other node is running in the node =worker1= with the ip
=10.200.2.2= on two different subnets.  The output says that it is
=kube-dns= is =3/3= because the =kube-dns= pod consists of 3 different
containers:

- kubedns
- dnsmasq
- healthz

***** JSON Verbose response from =kube-system= namespace

#+BEGIN_SRC sh :results output code :exports both
kubectl --namespace=kube-system get svc,pods,rc --output json
#+END_SRC

#+RESULTS:
#+BEGIN_SRC sh
{
    "kind": "List",
    "apiVersion": "v1",
    "metadata": {},
    "items": [
        {
            "kind": "Service",
            "apiVersion": "v1",
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/kube-dns",
                "uid": "89046a18-810f-11e6-bf0b-42010af00014",
                "resourceVersion": "912746",
                "creationTimestamp": "2016-09-22T21:57:20Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "KubeDNS"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.32.0.10",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "kind": "Pod",
            "apiVersion": "v1",
            "metadata": {
                "name": "kube-dns-v19-965658604-11x0e",
                "generateName": "kube-dns-v19-965658604-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-dns-v19-965658604-11x0e",
                "uid": "b2ded7ab-8117-11e6-bf0b-42010af00014",
                "resourceVersion": "917381",
                "creationTimestamp": "2016-09-22T22:55:46Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "pod-template-hash": "965658604",
                    "version": "v19"
                },
                "annotations": {
                    "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"kube-system\",\"name\":\"kube-dns-v19-965658604\",\"uid\":\"b2d3c265-8117-11e6-bf0b-42010af00014\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"917284\"}}\n",
                    "scheduler.alpha.kubernetes.io/critical-pod": "",
                    "scheduler.alpha.kubernetes.io/tolerations": "[{\"key\":\"CriticalAddonsOnly\", \"operator\":\"Exists\"}]"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "default-token-ple4f",
                        "secret": {
                            "secretName": "default-token-ple4f"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kubedns",
                        "image": "gcr.io/google_containers/kubedns-amd64:1.7",
                        "args": [
                            "--domain=cluster.local",
                            "--dns-port=10053"
                        ],
                        "ports": [
                            {
                                "name": "dns-local",
                                "containerPort": 10053,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp-local",
                                "containerPort": 10053,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "100m",
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "default-token-ple4f",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readiness",
                                "port": 8081,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 30,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "dnsmasq",
                        "image": "gcr.io/google_containers/kube-dnsmasq-amd64:1.3",
                        "args": [
                            "--cache-size=1000",
                            "--no-resolv",
                            "--server=127.0.0.1#10053"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "default-token-ple4f",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "healthz",
                        "image": "gcr.io/google_containers/exechealthz-amd64:1.1",
                        "args": [
                            "-cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 \u003e/dev/null \u0026\u0026 nslookup kubernetes.default.svc.cluster.local 127.0.0.1:10053 \u003e/dev/null",
                            "-port=8080",
                            "-quiet"
                        ],
                        "ports": [
                            {
                                "containerPort": 8080,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "10m",
                                "memory": "50Mi"
                            },
                            "requests": {
                                "cpu": "10m",
                                "memory": "50Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "default-token-ple4f",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "nodeName": "worker0",
                "securityContext": {}
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2016-09-22T22:55:46Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2016-09-22T22:56:26Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2016-09-22T22:55:46Z"
                    }
                ],
                "hostIP": "10.240.0.30",
                "podIP": "10.200.0.2",
                "startTime": "2016-09-22T22:55:46Z",
                "containerStatuses": [
                    {
                        "name": "dnsmasq",
                        "state": {
                            "running": {
                                "startedAt": "2016-09-22T22:55:51Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/kube-dnsmasq-amd64:1.3",
                        "imageID": "docker://sha256:9a15e39d0db8bd3aab67c49cf198d9062b655e3e7c2d8bd0b8adf92c4a6568e8",
                        "containerID": "docker://2289d3d3a536a57430a38ea5bcdc1424dc56ff172513a4459a743edfcfb85337"
                    },
                    {
                        "name": "healthz",
                        "state": {
                            "running": {
                                "startedAt": "2016-09-22T22:55:52Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/exechealthz-amd64:1.1",
                        "imageID": "docker://sha256:c3a89c92ef5b7f3dbd453a590d60d3ab486a6dfc815a8c95ce92d8dfd093feca",
                        "containerID": "docker://cd303f089120711443e5201344e7eb4053d1dc22c0caa25633426484d864921f"
                    },
                    {
                        "name": "kubedns",
                        "state": {
                            "running": {
                                "startedAt": "2016-09-22T22:55:50Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/kubedns-amd64:1.7",
                        "imageID": "docker://sha256:bec33bc01f037e7c0e4aba1774996579dbe7c786001df522976c2bbce98606c8",
                        "containerID": "docker://a9cf3120e3aa9e38adb73448c55f4849b9d8555fca088443490cfbac2b34db7a"
                    }
                ]
            }
        },
        {
            "kind": "Pod",
            "apiVersion": "v1",
            "metadata": {
                "name": "kube-dns-v19-965658604-qewo9",
                "generateName": "kube-dns-v19-965658604-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-dns-v19-965658604-qewo9",
                "uid": "b2deaf57-8117-11e6-bf0b-42010af00014",
                "resourceVersion": "917382",
                "creationTimestamp": "2016-09-22T22:55:46Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "pod-template-hash": "965658604",
                    "version": "v19"
                },
                "annotations": {
                    "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"kube-system\",\"name\":\"kube-dns-v19-965658604\",\"uid\":\"b2d3c265-8117-11e6-bf0b-42010af00014\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"917284\"}}\n",
                    "scheduler.alpha.kubernetes.io/critical-pod": "",
                    "scheduler.alpha.kubernetes.io/tolerations": "[{\"key\":\"CriticalAddonsOnly\", \"operator\":\"Exists\"}]"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "default-token-ple4f",
                        "secret": {
                            "secretName": "default-token-ple4f"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kubedns",
                        "image": "gcr.io/google_containers/kubedns-amd64:1.7",
                        "args": [
                            "--domain=cluster.local",
                            "--dns-port=10053"
                        ],
                        "ports": [
                            {
                                "name": "dns-local",
                                "containerPort": 10053,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp-local",
                                "containerPort": 10053,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "100m",
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "default-token-ple4f",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readiness",
                                "port": 8081,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 30,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "dnsmasq",
                        "image": "gcr.io/google_containers/kube-dnsmasq-amd64:1.3",
                        "args": [
                            "--cache-size=1000",
                            "--no-resolv",
                            "--server=127.0.0.1#10053"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "default-token-ple4f",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "healthz",
                        "image": "gcr.io/google_containers/exechealthz-amd64:1.1",
                        "args": [
                            "-cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 \u003e/dev/null \u0026\u0026 nslookup kubernetes.default.svc.cluster.local 127.0.0.1:10053 \u003e/dev/null",
                            "-port=8080",
                            "-quiet"
                        ],
                        "ports": [
                            {
                                "containerPort": 8080,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "10m",
                                "memory": "50Mi"
                            },
                            "requests": {
                                "cpu": "10m",
                                "memory": "50Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "default-token-ple4f",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "nodeName": "worker2",
                "securityContext": {}
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2016-09-22T22:55:46Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2016-09-22T22:56:26Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2016-09-22T22:55:46Z"
                    }
                ],
                "hostIP": "10.240.0.32",
                "podIP": "10.200.2.2",
                "startTime": "2016-09-22T22:55:46Z",
                "containerStatuses": [
                    {
                        "name": "dnsmasq",
                        "state": {
                            "running": {
                                "startedAt": "2016-09-22T22:55:50Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/kube-dnsmasq-amd64:1.3",
                        "imageID": "docker://sha256:9a15e39d0db8bd3aab67c49cf198d9062b655e3e7c2d8bd0b8adf92c4a6568e8",
                        "containerID": "docker://be639798da2cdf101ee1f95c843d64604db8fa47471b44382ad8db067b586f6e"
                    },
                    {
                        "name": "healthz",
                        "state": {
                            "running": {
                                "startedAt": "2016-09-22T22:55:51Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/exechealthz-amd64:1.1",
                        "imageID": "docker://sha256:c3a89c92ef5b7f3dbd453a590d60d3ab486a6dfc815a8c95ce92d8dfd093feca",
                        "containerID": "docker://7788e97d9607a9762dc5e34cafe34b0f33c9a153d7c2d1748ffebf1f8a2e197e"
                    },
                    {
                        "name": "kubedns",
                        "state": {
                            "running": {
                                "startedAt": "2016-09-22T22:55:49Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/google_containers/kubedns-amd64:1.7",
                        "imageID": "docker://sha256:bec33bc01f037e7c0e4aba1774996579dbe7c786001df522976c2bbce98606c8",
                        "containerID": "docker://bb4542a5b0ead13ce78cc9f8d1c941222dc4cb10dba9c325cf519c2938b5405d"
                    }
                ]
            }
        }
    ]
}
#+END_SRC

***** JSON Verbose response from =default= namespace

#+BEGIN_SRC sh :results output code :exports both
kubectl get svc,pods,rc -o json
#+END_SRC

#+RESULTS:
#+BEGIN_SRC sh
{
    "kind": "List",
    "apiVersion": "v1",
    "metadata": {},
    "items": [
        {
            "kind": "Service",
            "apiVersion": "v1",
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/kubernetes",
                "uid": "0eac8174-79df-11e6-b4e3-42010af00014",
                "resourceVersion": "12",
                "creationTimestamp": "2016-09-13T18:22:41Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 443
                    }
                ],
                "clusterIP": "10.32.0.1",
                "type": "ClusterIP",
                "sessionAffinity": "ClientIP"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
#+END_SRC

